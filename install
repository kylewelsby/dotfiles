#!/bin/bash

#### Settings ####

DOT_FILES="
.aws
.bash_itrc
.bash_profile
.bashrc
.gitconfig
.gitignore.profiles.js
.npmrc
.ssh
"

BREW_PROGRAMS="
git
hugo
jq
mas
node
openssl
rbenv
ruby-build
ssh-copy-id
"

CASK_PROGRAMS="
1password
adobe-creative-cloud
aerial
alfred
atom
avast-secureline-vpn
bartender
blisk
caffeine
cleanmymac
dropbox
evernote
google-chrome
google-photos-backup-and-sync
grammarly
imageoptim
krisp
music-manager
muzzle
numi
rescuetime
sketch
skype
spectacle
the-unarchiver
whatsapp
"

APP_STORE_PROGRAMS="
Clean
Contrast
Spark
Todoist
Xcode
"

NPM_MODULES="
@vue/cli
gitignorer
outdated
serverless
standard
"

APM_MODULES="
emmet
language-gherkin
language-graphql
language-hugo
language-markdown
language-vue
linter
linter-js-standard
linter-ui-default
pigments
sort-lines
standard-formatter
"

BASH_IT_ALIAS="
bundler
general
git
osx
"

BASH_IT_COMPLETIONS="
bash-it
brew
brew
git
npm
rake
ssh
system
"

BASH_IT_PLUGINS="
extract
alias-completion
ruby
xterm
rbenv
"

#### Settings End #####


RED='\033[0;31m'
NC='\033[0m' # No Color
SCRIPT_PATH="`dirname \"$0\"`"

# Abort on error
set -e

if [ "$1" == "--dry-run" ]; then
  echo "Dry run mode..."; echo
  DRY_RUN=1
fi

function run {
  echo "  > $1"
  if [ -z "$DRY_RUN" ]; then
    eval $1
  fi
}

function find_command {
  command -v git >/dev/null 2>&1 || {
    echo >&2 "git is required for this installation but can not be found.  Aborting.";
    exit 1;
  }
  echo `command -v $1`
}

# Check for git
git_command=`find_command git`
# Check for curl
curl_command=`find_command curl`
# Check for ruby
ruby_command=`find_command ruby`


# Install homebrew
which brew
if [[ $? != 0 ]]; then
  echo "# Installing Homebrew"
  brew_install='/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
  run "$brew_install"
fi

brew_command=`which brew`
# run "$brew_command update"

# for pname in $BREW_PROGRAMS; do
#   echo "# Installing Brew ${pname}"
#   run "${brew_command} list ${pname} || ${brew_command} install ${pname}"
# done
# run "$brew_command cleanup"

# echo "# Installing NPM modules"
# run "npm install --global ${NPM_MODULES}"

# install bash_it
echo "# Installing Bash-it"
bash_it_git="Bash-it/bash-it"
bash_it_location="${HOME}/.bash_it"
bash_it_clone="$git_command clone --depth=1 https://github.com/$bash_it_git.git ${bash_it_location}"
bash_it_install="${HOME}/.bash_it/install.sh --silent --no-modify-config"
if [ ! -d $bash_it_location ]; then
  run "rm -rf ${bash_it_location}"
  run "$bash_it_clone"
  run "$bash_it_install"
fi

set +e
BASH_IT=~/.bash_it
run "source $HOME/.bash_it/bash_it.sh"
set -e


# copy dot files
for filename in $DOT_FILES; do
  echo "# Copying ${filename}"
  from_file="${SCRIPT_PATH}/${filename}"
  to_file="${HOME}/${filename}"
  copy_file="cp -a ${from_file} ${to_file}"
  backup_file="cp -a ${to_file} ${to_file}.backup"
  if [ -e "${to_file}" ]; then
    run "$backup_file"
  fi
  run "$copy_file"
done

run ". ~/.bashrc"
run "tset"
run "reset"
run "bash --login -c"
echo $0
echo $@
echo "Continue script"

run "bash-it enable alias ${BASH_IT_ALIAS}"
run "bash-it enable completion ${BASH_IT_COMPLETIONS}"
run "bash-it enable plugin ${BASH_IT_PLUGINS}"


#
#
# # install cask programs
# for pname in $CASK_PROGRAMS; do
#  echo "# Installing Brew Cask ${pname}"
#  run "brew cask install ${pname}"
# done
#
#
# # install Atom.io packages after `brew cask install atom`
#
# echo "# Installing Atom Community Packages"
# run "apm install ${APM_MODULES}"
#
#
# # lucky guess install App Store applications
# for pname in $APP_STORE_PROGRAMS; do
#  echo "# Installing Mac App ${pname}"
#  run "mas lucky ${pname}"
# done
#
#
# # Set ~/.ssh/config to 600
# run "chmod 600 $HOME/.ssh/config"
#
# run ".macos"


# cleaning up
echo -e "\n${RED}Please relogin to see changes.${NC}"
